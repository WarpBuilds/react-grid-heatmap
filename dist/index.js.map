{"version":3,"file":"index.js","sources":["../src/Cell.tsx","../src/Row.tsx","../src/XLabels.tsx","../src/Column.tsx","../src/YLabels.tsx","../src/YLabelAligner.tsx","../src/useElementHeight.ts","../src/index.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\n\ninterface Props {\n  render?: (x: number, y: number, ratio: number) => ReactNode\n  posX: number\n  posY: number\n  style?: (x: number, y: number, ratio: number) => {}\n  ratio: number\n  value: number\n  height?: string\n  square?: boolean\n  onClick?: (x: number, y: number) => void\n  extraProps?: (\n    x: number,\n    y: number,\n    value: number\n  ) => React.HTMLAttributes<HTMLDivElement>\n}\n\nfunction noop<T>(returnVal: T) {\n  return () => returnVal\n}\n\nconst Cell = ({\n  render = noop(null),\n  style = noop({}),\n  ratio,\n  posX,\n  posY,\n  square = false,\n  height = '2rem',\n  value,\n  onClick,\n  extraProps = noop({})\n}: Props) => {\n  return (\n    <div\n      onClick={() => (onClick || noop({}))(posX, posY)}\n      style={{\n        borderStyle: 'solid',\n        borderColor: '#fff',\n        borderWidth: '1px 1px 0 0',\n        textAlign: 'center',\n        color: `rgb(0, 0, 0, ${ratio / 2 + 0.4})`,\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        flexGrow: square ? 0 : 1,\n        flexBasis: square ? height : 0,\n        flexShrink: 0,\n        height: height,\n        lineHeight: height,\n        borderRadius: '4px',\n        fontSize: '.8rem',\n        cursor: onClick ? 'pointer' : 'initial',\n        backgroundColor: `rgb(12, 160, 44, ${ratio + 0.05})`,\n        ...style(posX, posY, ratio)\n      }}\n      {...extraProps(posX, posY, value)}\n    >\n      {render(posX, posY, value)}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n}\n\nexport default function Row({ children, reverse = false }: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'row-reverse' : 'row',\n        justifyContent: reverse ? 'flex-end' : 'initial'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  xLabelsStyle?: (index: number) => {}\n  square?: boolean\n  height: string\n}\n\nexport default function XLabels({\n  labels,\n  xLabelsStyle = () => ({}),\n  height,\n  square = false\n}: Props) {\n  const widthPercent = `${100 / labels.length}%`\n  return (\n    <div style={{ display: 'flex', textAlign: 'center' }}>\n      {labels.map((label, index) => (\n        <div\n          key={`${label}-${index}`}\n          style={{\n            padding: '0.2rem 0',\n            boxSizing: 'border-box',\n            flexGrow: square ? 'initial' : 1,\n            overflow: 'hidden',\n            flexShrink: 1,\n            flexBasis: square ? height : widthPercent,\n            width: square ? height : widthPercent,\n            ...xLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  children: any\n  reverse?: boolean\n  grow?: boolean\n}\n\nexport default function Column({\n  children,\n  grow = false,\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: reverse ? 'column-reverse' : 'column',\n        flexGrow: grow ? 1 : 0\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  labels: string[]\n  height: string\n  reverse?: boolean\n  yLabelsStyle?: (index: number) => {}\n}\n\nexport default function YLabels({\n  labels,\n  height,\n  yLabelsStyle = () => ({}),\n  reverse = false\n}: Props) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: reverse ? 'left' : 'right'\n      }}\n    >\n      {labels.map((label, index) => (\n        <div\n          key={label}\n          style={{\n            boxSizing: 'border-box',\n            padding: '0 0.2rem',\n            lineHeight: height,\n            ...yLabelsStyle(index)\n          }}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\n\ninterface Props {\n  xLabelHeight: number\n  isXLabelReverse: boolean\n  children: any\n}\n\nexport default function YLabelAligner({\n  xLabelHeight,\n  isXLabelReverse,\n  children\n}: Props) {\n  const style = {\n    [isXLabelReverse ? 'marginBottom' : 'marginTop']: `${xLabelHeight}px`\n  }\n  return <div style={style}>{children}</div>\n}\n","import React from 'react'\n\ninterface ClientHeight {\n  clientHeight: number\n}\n\nexport default function useElementHeight(\n  initHeight: number\n): [number, React.MutableRefObject<any>] {\n  const eleRef = React.useRef(null)\n  const [eleHeight, setEleHeight] = React.useState<number>(initHeight)\n\n  React.useEffect(() => {\n    if (eleRef.current) {\n      const height = ((eleRef.current || {}) as ClientHeight).clientHeight\n      setEleHeight(height)\n    }\n  }, [])\n\n  return [eleHeight, eleRef]\n}\n","import * as React from 'react'\nimport Cell from './Cell'\nimport Row from './Row'\nimport XLabels from './XLabels'\nimport Column from './Column'\nimport YLabels from './YLabels'\nimport YLabelAligner from './YLabelAligner'\nimport useElementHeight from './useElementHeight'\n\nexport interface HeatMapGridProps {\n  data: number[][]\n  xLabels?: string[]\n  yLabels?: string[]\n  cellHeight?: string\n  square?: boolean\n  xLabelsPos?: 'top' | 'bottom'\n  yLabelsPos?: 'left' | 'right'\n  xLabelsStyle?: (index: number) => {}\n  yLabelsStyle?: (index: number) => {}\n  cellStyle?: (x: number, y: number, ratio: number) => {}\n  cellRender?: (x: number, y: number, value: number) => {}\n  cellExtraProps?: (\n    x: number,\n    y: number,\n    value: number\n  ) => React.HTMLAttributes<HTMLDivElement>\n  onClick?: (x: number, y: number) => void\n}\n\nfunction getMinMax(data: number[][]): [number, number] {\n  const flatArray = data.reduce((i, o) => [...o, ...i], [])\n  const max = Math.max(...flatArray)\n  const min = Math.min(...flatArray)\n  return [min, max]\n}\n\nexport const HeatMapGrid = ({\n  data,\n  xLabels,\n  yLabels,\n  xLabelsPos = 'top',\n  yLabelsPos = 'left',\n  square = false,\n  cellHeight = '2px',\n  xLabelsStyle,\n  yLabelsStyle,\n  cellStyle,\n  cellRender,\n  cellExtraProps,\n  onClick\n}: HeatMapGridProps) => {\n  const [xLabelHeight, xLabelRef] = useElementHeight(22)\n  const [min, max] = getMinMax(data)\n  const minMaxDiff = max - min\n  const isXLabelReverse = xLabelsPos === 'bottom'\n  const isYLabelReverse = yLabelsPos === 'right'\n\n  return (\n    <Row reverse={isYLabelReverse}>\n      {yLabels && (\n        <YLabelAligner\n          xLabelHeight={xLabelHeight}\n          isXLabelReverse={isXLabelReverse}\n        >\n          <YLabels\n            reverse={isYLabelReverse}\n            labels={yLabels}\n            height={cellHeight}\n            yLabelsStyle={yLabelsStyle}\n          />\n        </YLabelAligner>\n      )}\n      <Column reverse={isXLabelReverse} grow={!square}>\n        <div ref={xLabelRef}>\n          {xLabels && (\n            <XLabels\n              labels={xLabels}\n              xLabelsStyle={xLabelsStyle}\n              height={cellHeight}\n              square={square}\n            />\n          )}\n        </div>\n        <Column>\n          {data.map((rowItems, xi) => (\n            <Row key={xi}>\n              {rowItems.map((value, yi) => (\n                <Cell\n                  extraProps={cellExtraProps}\n                  key={`${xi}-${yi}`}\n                  posX={xi}\n                  posY={yi}\n                  onClick={onClick}\n                  value={value}\n                  height={cellHeight}\n                  square={square}\n                  render={cellRender}\n                  style={cellStyle}\n                  ratio={(value - min) / minMaxDiff}\n                />\n              ))}\n            </Row>\n          ))}\n        </Column>\n      </Column>\n    </Row>\n  )\n}\n"],"names":["noop","returnVal","Cell","render","style","ratio","posX","posY","square","height","value","onClick","extraProps","React","borderStyle","borderColor","borderWidth","textAlign","color","overflow","boxSizing","flexGrow","flexBasis","flexShrink","lineHeight","borderRadius","fontSize","cursor","backgroundColor","memo","Row","children","reverse","display","flexDirection","justifyContent","XLabels","labels","xLabelsStyle","widthPercent","length","map","label","index","padding","width","Column","grow","YLabels","yLabelsStyle","YLabelAligner","xLabelHeight","isXLabelReverse","useElementHeight","initHeight","eleRef","useRef","useState","eleHeight","setEleHeight","useEffect","current","clientHeight","getMinMax","data","flatArray","reduce","i","o","max","Math","min","HeatMapGrid","xLabels","yLabels","xLabelsPos","yLabelsPos","cellHeight","cellStyle","cellRender","cellExtraProps","xLabelRef","minMaxDiff","isYLabelReverse","React.createElement","rowItems","xi","yi"],"mappings":"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"}